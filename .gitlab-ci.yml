.staging_pipeline: &staging_pipeline
  tags: [saas-linux-medium-amd64]
  environment: staging
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

.production_pipeline: &production_pipeline
  tags: [saas-linux-medium-amd64]
  environment: production
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/

workflow:
  name: $CI_COMMIT_TITLE

default:
  image: docker:28.1.1-cli
  services: [docker:28.1.1-dind]
  interruptible: true
  artifacts:
    expire_in: 30 minutes

variables:
  STAGING_HOSTNAME: "3.123.200.77"
  PRODUCTION_HOSTNAME: "3.123.200.77"

stages:
  - test
  - build
  - deploy
  - release

environments:
  <<: *production_pipeline
  stage: .pre
  script: |
    echo "CI_DOCKER_TAG=$(echo "$CI_COMMIT_TAG" | \
      awk '{gsub(/^v/, "", $0); print}'
    )" >> variables.env
    echo "CI_REPOSITORY_NAME=$(echo "$CI_PROJECT_PATH" | \
      tr '[:upper:]' '[:lower:]'
    )" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env

test-staging:
  <<: *staging_pipeline
  stage: test
  script: |
    docker build \
      --target test \
      --build-arg API_PORT=$API_PORT \
      --output=type=cacheonly .

build-staging:
  <<: *staging_pipeline
  stage: build
  script:
    - |
      docker build \
        --tag web-service/api-gitlab:staging \
        --target final \
        --build-arg DOCKER_TAG=latest \
        --build-arg API_PORT=$API_PORT .
    - docker save -o api-gitlab-staging.tar web-service/api-gitlab:staging
  artifacts:
    name: staging-docker-image
    paths:
      - api-gitlab-staging.tar

deploy-staging:
  <<: *staging_pipeline
  stage: deploy
  tags: [staging-deploy]
  environment:
    name: staging
    url: http://${STAGING_HOSTNAME}:${API_PORT}/
  variables:
    PROJECT_NAME: web-service-gitlab-staging
    DOCKER_NAME: api-gitlab-staging
    DOCKER_IMAGE: web-service/api-gitlab
    DOCKER_TAG: staging
  before_script: |
    docker load -i api-gitlab-staging.tar
  script: |
    docker compose --profile prod up \
      -d --no-build --force-recreate \
      --pull missing
  dependencies:
    - build-staging

build-production:
  <<: *production_pipeline
  stage: build
  before_script: |
    echo "$CI_REGISTRY_PASSWORD" | \
      docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - |
      docker build \
        --tag registry.gitlab.com/$CI_REPOSITORY_NAME/api-gitlab:latest \
        --target final \
        --build-arg DOCKER_TAG=$CI_DOCKER_TAG \
        --build-arg API_PORT=$API_PORT .
    - |
      docker tag registry.gitlab.com/$CI_REPOSITORY_NAME/api-gitlab:latest \
        registry.gitlab.com/$CI_REPOSITORY_NAME/api-gitlab:$CI_DOCKER_TAG
    - docker push registry.gitlab.com/$CI_REPOSITORY_NAME/api-gitlab:latest
    - docker push registry.gitlab.com/$CI_REPOSITORY_NAME/api-gitlab:$CI_DOCKER_TAG
  dependencies:
    - environments

deploy-production:
  <<: *production_pipeline
  stage: deploy
  tags: [production-deploy]
  environment:
    name: production
    url: http://${PRODUCTION_HOSTNAME}:${API_PORT}/
  variables:
    PROJECT_NAME: web-service-gitlab
    DOCKER_NAME: api-gitlab
    DOCKER_IMAGE: registry.gitlab.com/$CI_REPOSITORY_NAME/api-gitlab
    DOCKER_TAG: $CI_DOCKER_TAG
  before_script: |
    echo "$CI_JOB_TOKEN" | \
      docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script: |
    docker compose --profile prod up \
      -d --no-build --force-recreate \
      --pull missing
  dependencies:
    - environments

release:
  <<: *production_pipeline
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:v0.23.0
  script:
    - |
      wget --spider -q "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG" 2>/dev/null || \
      release-cli create \
        --tag-name "$CI_COMMIT_TAG" \
        --name "Release $CI_COMMIT_TAG" \
        --description "Release $CI_COMMIT_TAG"
